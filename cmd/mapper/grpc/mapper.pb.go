// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_02/cmd/mapper/grpc/mapper.proto

package grpc

import (
	context "context"
	fmt "fmt"
	space "github.com/elojah/game_02/pkg/space"
	dto "github.com/elojah/game_02/pkg/space/dto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/elojah/game_02/cmd/mapper/grpc/mapper.proto", fileDescriptor_252cc2e40436b3fc)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_02/cmd/mapper/grpc/mapper.proto", fileDescriptor_252cc2e40436b3fc)
}

var fileDescriptor_252cc2e40436b3fc = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0x7d, 0xa4, 0x4f, 0x1d, 0xf2, 0x15, 0x90, 0x32, 0x66, 0x38, 0x77, 0x80, 0x4f, 0x14,
	0x10, 0x17, 0x80, 0x18, 0x61, 0x2a, 0x3b, 0xca, 0x8f, 0x71, 0x03, 0x89, 0x6c, 0xc5, 0xee, 0xce,
	0x25, 0x70, 0x19, 0x5c, 0x02, 0x63, 0x47, 0xc6, 0x8c, 0x1d, 0x89, 0xb3, 0x30, 0x76, 0x64, 0x44,
	0x75, 0x2d, 0xb5, 0x0c, 0x48, 0xd9, 0xce, 0x7b, 0x5e, 0x3f, 0x7e, 0x2c, 0x47, 0x57, 0xb2, 0xb6,
	0xcb, 0x55, 0xc1, 0x4b, 0xd5, 0x92, 0x68, 0xd4, 0x53, 0xbe, 0x24, 0x99, 0xb7, 0xe2, 0x21, 0xcd,
	0xa8, 0x6c, 0x2b, 0x6a, 0x73, 0xad, 0x45, 0x47, 0xb2, 0xd3, 0x65, 0x98, 0xb9, 0xee, 0x94, 0x55,
	0xf1, 0xbf, 0xdd, 0x2a, 0x39, 0x3f, 0xa2, 0xa5, 0x92, 0x8a, 0x7c, 0x59, 0xac, 0x1e, 0x7d, 0xf2,
	0xc1, 0x4f, 0x7b, 0x28, 0xb9, 0xfc, 0x5b, 0xa6, 0x9f, 0x25, 0x19, 0x9d, 0x97, 0x82, 0x2a, 0xab,
	0xc8, 0x88, 0xd2, 0xaa, 0xa0, 0x4a, 0xb2, 0xa9, 0x94, 0xad, 0x1b, 0x11, 0x98, 0x74, 0x0a, 0xf3,
	0xcb, 0xc2, 0xa7, 0x10, 0x07, 0x43, 0x56, 0x47, 0xb3, 0x3b, 0xff, 0x21, 0x31, 0x45, 0xff, 0x6f,
	0x6b, 0x63, 0x17, 0xfe, 0x36, 0x13, 0x9f, 0xf1, 0xca, 0x2a, 0x7e, 0xd8, 0x24, 0x27, 0xdc, 0xc3,
	0x7c, 0x1f, 0x53, 0x88, 0x79, 0x34, 0xdf, 0xd5, 0xf7, 0x75, 0x23, 0x16, 0xc2, 0x9a, 0x78, 0x7e,
	0x44, 0xd8, 0xe4, 0x34, 0x1c, 0x0f, 0x75, 0x0a, 0xd7, 0x37, 0xfd, 0x80, 0x6c, 0x33, 0x20, 0xdb,
	0x0e, 0x08, 0xdf, 0x03, 0xc2, 0x8b, 0x43, 0x78, 0x73, 0x08, 0xef, 0x0e, 0x61, 0xed, 0x10, 0x3e,
	0x1c, 0x42, 0xef, 0x10, 0x3e, 0x1d, 0xc2, 0x97, 0x43, 0xb6, 0x75, 0x08, 0xaf, 0x23, 0xb2, 0xf5,
	0x88, 0xd0, 0x8f, 0xc8, 0x36, 0x23, 0xb2, 0x62, 0xe6, 0xdf, 0x7d, 0xf1, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x95, 0x4d, 0xf7, 0xf4, 0xf2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MapperClient is the client API for Mapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapperClient interface {
	ListSectors(ctx context.Context, in *dto.ListSector, opts ...grpc.CallOption) (Mapper_ListSectorsClient, error)
	ListTileSets(ctx context.Context, in *dto.ListSet, opts ...grpc.CallOption) (Mapper_ListTileSetsClient, error)
}

type mapperClient struct {
	cc *grpc.ClientConn
}

func NewMapperClient(cc *grpc.ClientConn) MapperClient {
	return &mapperClient{cc}
}

func (c *mapperClient) ListSectors(ctx context.Context, in *dto.ListSector, opts ...grpc.CallOption) (Mapper_ListSectorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mapper_serviceDesc.Streams[0], "/grpc.Mapper/ListSectors", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapperListSectorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mapper_ListSectorsClient interface {
	Recv() (*space.Sector, error)
	grpc.ClientStream
}

type mapperListSectorsClient struct {
	grpc.ClientStream
}

func (x *mapperListSectorsClient) Recv() (*space.Sector, error) {
	m := new(space.Sector)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mapperClient) ListTileSets(ctx context.Context, in *dto.ListSet, opts ...grpc.CallOption) (Mapper_ListTileSetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mapper_serviceDesc.Streams[1], "/grpc.Mapper/ListTileSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapperListTileSetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mapper_ListTileSetsClient interface {
	Recv() (*space.TileSet, error)
	grpc.ClientStream
}

type mapperListTileSetsClient struct {
	grpc.ClientStream
}

func (x *mapperListTileSetsClient) Recv() (*space.TileSet, error) {
	m := new(space.TileSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MapperServer is the server API for Mapper service.
type MapperServer interface {
	ListSectors(*dto.ListSector, Mapper_ListSectorsServer) error
	ListTileSets(*dto.ListSet, Mapper_ListTileSetsServer) error
}

// UnimplementedMapperServer can be embedded to have forward compatible implementations.
type UnimplementedMapperServer struct {
}

func (*UnimplementedMapperServer) ListSectors(req *dto.ListSector, srv Mapper_ListSectorsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSectors not implemented")
}
func (*UnimplementedMapperServer) ListTileSets(req *dto.ListSet, srv Mapper_ListTileSetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTileSets not implemented")
}

func RegisterMapperServer(s *grpc.Server, srv MapperServer) {
	s.RegisterService(&_Mapper_serviceDesc, srv)
}

func _Mapper_ListSectors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(dto.ListSector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapperServer).ListSectors(m, &mapperListSectorsServer{stream})
}

type Mapper_ListSectorsServer interface {
	Send(*space.Sector) error
	grpc.ServerStream
}

type mapperListSectorsServer struct {
	grpc.ServerStream
}

func (x *mapperListSectorsServer) Send(m *space.Sector) error {
	return x.ServerStream.SendMsg(m)
}

func _Mapper_ListTileSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(dto.ListSet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapperServer).ListTileSets(m, &mapperListTileSetsServer{stream})
}

type Mapper_ListTileSetsServer interface {
	Send(*space.TileSet) error
	grpc.ServerStream
}

type mapperListTileSetsServer struct {
	grpc.ServerStream
}

func (x *mapperListTileSetsServer) Send(m *space.TileSet) error {
	return x.ServerStream.SendMsg(m)
}

var _Mapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Mapper",
	HandlerType: (*MapperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSectors",
			Handler:       _Mapper_ListSectors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTileSets",
			Handler:       _Mapper_ListTileSets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/elojah/game_02/cmd/mapper/grpc/mapper.proto",
}

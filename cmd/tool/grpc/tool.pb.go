// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_02/cmd/tool/grpc/tool.proto

package grpc

import (
	context "context"
	fmt "fmt"
	dto "github.com/elojah/game_02/pkg/space/dto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/elojah/game_02/cmd/tool/grpc/tool.proto", fileDescriptor_f417afdf39b7d03a)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_02/cmd/tool/grpc/tool.proto", fileDescriptor_f417afdf39b7d03a)
}

var fileDescriptor_f417afdf39b7d03a = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8e, 0x3b, 0x4e, 0xc4, 0x30,
	0x10, 0x86, 0x3d, 0xd2, 0x8a, 0x22, 0x12, 0x14, 0x29, 0x28, 0x82, 0x34, 0x37, 0xc0, 0x46, 0xa1,
	0xa0, 0x44, 0xe2, 0x71, 0x82, 0xdd, 0x1e, 0xe5, 0x31, 0x78, 0x03, 0x8e, 0xc6, 0x0a, 0xb3, 0x05,
	0x1d, 0x47, 0xe0, 0x18, 0x1c, 0x81, 0x72, 0x4b, 0xca, 0x94, 0x5b, 0x12, 0xa7, 0xa1, 0xdc, 0x92,
	0x12, 0xad, 0x03, 0x82, 0x8a, 0xee, 0x7f, 0xf8, 0xf7, 0x37, 0x49, 0x6e, 0x1b, 0x59, 0xae, 0x4a,
	0x5d, 0x71, 0x6b, 0xc8, 0xf1, 0x5d, 0xb1, 0x34, 0xb6, 0x68, 0xe9, 0xe6, 0x24, 0x37, 0x55, 0x5b,
	0x1b, 0x61, 0x76, 0xc6, 0x76, 0xbe, 0x8a, 0x4a, 0xfb, 0x8e, 0x85, 0xd3, 0xd9, 0x2e, 0xc8, 0x8e,
	0xff, 0x2c, 0x2d, 0x5b, 0x36, 0xb1, 0x2c, 0x57, 0xb7, 0xd1, 0x45, 0x13, 0xd5, 0x34, 0xca, 0x8e,
	0x2c, 0xb3, 0x75, 0xf4, 0xfb, 0x8a, 0x5a, 0x2f, 0x8f, 0xdf, 0xe5, 0x3f, 0x57, 0xf8, 0x7b, 0x6b,
	0x1e, 0x7c, 0x51, 0x91, 0xa9, 0x85, 0x8d, 0x34, 0x8e, 0xa6, 0x4d, 0x7e, 0x9e, 0xcc, 0x16, 0xcc,
	0x2e, 0x3d, 0x4b, 0xf6, 0x2f, 0x3b, 0x2a, 0x84, 0x16, 0x8d, 0xa3, 0x39, 0x49, 0x7a, 0xa0, 0x6b,
	0x61, 0x3d, 0x65, 0x73, 0x92, 0xec, 0x50, 0x4f, 0x68, 0xfd, 0x83, 0xd6, 0xd7, 0x3b, 0xf4, 0xc5,
	0x55, 0x3f, 0xa0, 0xda, 0x0c, 0xa8, 0xb6, 0x03, 0xc2, 0xe7, 0x80, 0xf0, 0x14, 0x10, 0x5e, 0x02,
	0xc2, 0x6b, 0x40, 0x58, 0x07, 0x84, 0xb7, 0x80, 0xd0, 0x07, 0x84, 0xf7, 0x80, 0xf0, 0x11, 0x50,
	0x6d, 0x03, 0xc2, 0xf3, 0x88, 0x6a, 0x3d, 0x22, 0xf4, 0x23, 0xaa, 0xcd, 0x88, 0xaa, 0xdc, 0x8b,
	0xbf, 0x9e, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x65, 0x38, 0x63, 0xfe, 0x49, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ToolClient is the client API for Tool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ToolClient interface {
	CreateTileSet(ctx context.Context, in *dto.CreateSet, opts ...grpc.CallOption) (*types.Empty, error)
}

type toolClient struct {
	cc *grpc.ClientConn
}

func NewToolClient(cc *grpc.ClientConn) ToolClient {
	return &toolClient{cc}
}

func (c *toolClient) CreateTileSet(ctx context.Context, in *dto.CreateSet, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Tool/CreateTileSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServer is the server API for Tool service.
type ToolServer interface {
	CreateTileSet(context.Context, *dto.CreateSet) (*types.Empty, error)
}

// UnimplementedToolServer can be embedded to have forward compatible implementations.
type UnimplementedToolServer struct {
}

func (*UnimplementedToolServer) CreateTileSet(ctx context.Context, req *dto.CreateSet) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTileSet not implemented")
}

func RegisterToolServer(s *grpc.Server, srv ToolServer) {
	s.RegisterService(&_Tool_serviceDesc, srv)
}

func _Tool_CreateTileSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CreateSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).CreateTileSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tool/CreateTileSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).CreateTileSet(ctx, req.(*dto.CreateSet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Tool",
	HandlerType: (*ToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTileSet",
			Handler:    _Tool_CreateTileSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/elojah/game_02/cmd/tool/grpc/tool.proto",
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: item.proto

package item

import (
	fmt "fmt"
	github_com_elojah_game_02_pkg_ulid "github.com/elojah/game_02/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Orb represents a skill learner object. Consumer learns skill at item consumption.
type Orb struct {
	AbilityID github_com_elojah_game_02_pkg_ulid.ID `protobuf:"bytes,1,opt,name=AbilityID,proto3,customtype=github.com/elojah/game_02/pkg/ulid.ID" json:"AbilityID"`
}

func (m *Orb) Reset()      { *m = Orb{} }
func (*Orb) ProtoMessage() {}
func (*Orb) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{0}
}
func (m *Orb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Orb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Orb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Orb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orb.Merge(m, src)
}
func (m *Orb) XXX_Size() int {
	return m.Size()
}
func (m *Orb) XXX_DiscardUnknown() {
	xxx_messageInfo_Orb.DiscardUnknown(m)
}

var xxx_messageInfo_Orb proto.InternalMessageInfo

// Component represents a common object used for craft only.
type Component struct {
	Type github_com_elojah_game_02_pkg_ulid.ID `protobuf:"bytes,1,opt,name=Type,proto3,customtype=github.com/elojah/game_02/pkg/ulid.ID" json:"Type"`
}

func (m *Component) Reset()      { *m = Component{} }
func (*Component) ProtoMessage() {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{1}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Component.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return m.Size()
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

type Type struct {
	Orb       *Orb       `protobuf:"bytes,1,opt,name=Orb,proto3" json:"Orb,omitempty"`
	Component *Component `protobuf:"bytes,2,opt,name=Component,proto3" json:"Component,omitempty"`
}

func (m *Type) Reset()      { *m = Type{} }
func (*Type) ProtoMessage() {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{2}
}
func (m *Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return m.Size()
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

func (m *Type) GetOrb() *Orb {
	if m != nil {
		return m.Orb
	}
	return nil
}

func (m *Type) GetComponent() *Component {
	if m != nil {
		return m.Component
	}
	return nil
}

type I struct {
	ID      github_com_elojah_game_02_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_02/pkg/ulid.ID" json:"ID"`
	Name    string                                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Details string                                `protobuf:"bytes,3,opt,name=Details,proto3" json:"Details,omitempty"`
	Icon    github_com_elojah_game_02_pkg_ulid.ID `protobuf:"bytes,4,opt,name=Icon,proto3,customtype=github.com/elojah/game_02/pkg/ulid.ID" json:"Icon"`
	Type    Type                                  `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type"`
}

func (m *I) Reset()      { *m = I{} }
func (*I) ProtoMessage() {}
func (*I) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{3}
}
func (m *I) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *I) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_I.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *I) XXX_Merge(src proto.Message) {
	xxx_messageInfo_I.Merge(m, src)
}
func (m *I) XXX_Size() int {
	return m.Size()
}
func (m *I) XXX_DiscardUnknown() {
	xxx_messageInfo_I.DiscardUnknown(m)
}

var xxx_messageInfo_I proto.InternalMessageInfo

func (m *I) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *I) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *I) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type{}
}

func init() {
	proto.RegisterType((*Orb)(nil), "item.Orb")
	proto.RegisterType((*Component)(nil), "item.Component")
	proto.RegisterType((*Type)(nil), "item.Type")
	proto.RegisterType((*I)(nil), "item.I")
}

func init() { proto.RegisterFile("item.proto", fileDescriptor_6007f868cf6553df) }

var fileDescriptor_6007f868cf6553df = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x31, 0x4b, 0xf3, 0x50,
	0x14, 0xcd, 0x6d, 0xf3, 0x7d, 0x1f, 0x79, 0x9f, 0x20, 0xbc, 0x29, 0x28, 0xdc, 0x4a, 0x50, 0x70,
	0x69, 0x22, 0x75, 0x13, 0x04, 0x5b, 0xb3, 0x04, 0xa1, 0x85, 0xe0, 0xe0, 0x26, 0x49, 0x8d, 0x69,
	0x34, 0xe9, 0x0b, 0x35, 0x1d, 0xba, 0xf9, 0x13, 0xfc, 0x09, 0x8e, 0xfe, 0x04, 0x47, 0xc7, 0x8e,
	0x1d, 0xab, 0x43, 0x31, 0xaf, 0x8b, 0x63, 0x47, 0x47, 0xc9, 0x8d, 0xda, 0xce, 0xdd, 0xee, 0x3d,
	0x39, 0xe7, 0xdc, 0x9c, 0xc3, 0x63, 0x2c, 0xca, 0x82, 0xc4, 0x4c, 0x07, 0x22, 0x13, 0x5c, 0x2d,
	0xe6, 0xad, 0x7a, 0x18, 0x65, 0xbd, 0xa1, 0x6f, 0x76, 0x45, 0x62, 0x85, 0x22, 0x14, 0x16, 0x7d,
	0xf4, 0x87, 0xd7, 0xb4, 0xd1, 0x42, 0x53, 0x29, 0x32, 0x5c, 0x56, 0xed, 0x0c, 0x7c, 0x7e, 0xc6,
	0xb4, 0xa6, 0x1f, 0xc5, 0x51, 0x36, 0x72, 0x6c, 0x1d, 0x76, 0x60, 0x7f, 0xa3, 0x55, 0x1f, 0xcf,
	0x6a, 0xca, 0xdb, 0xac, 0xb6, 0xb7, 0x62, 0x18, 0xc4, 0xe2, 0xc6, 0xeb, 0x59, 0xa1, 0x97, 0x04,
	0x97, 0x07, 0x0d, 0x2b, 0xbd, 0x0d, 0xad, 0x61, 0x1c, 0x5d, 0x99, 0x8e, 0xed, 0x2e, 0xf5, 0x46,
	0x9b, 0x69, 0xa7, 0x22, 0x49, 0x45, 0x3f, 0xe8, 0x67, 0xbc, 0xc9, 0xd4, 0xf3, 0x51, 0x1a, 0xac,
	0x67, 0x4a, 0x52, 0xe3, 0xa2, 0xb4, 0xe0, 0xdb, 0xf4, 0xaf, 0xe4, 0xf4, 0xbf, 0xa1, 0x99, 0x14,
	0xbd, 0x33, 0xf0, 0x5d, 0x4a, 0x50, 0x5f, 0x39, 0xaa, 0x57, 0x88, 0xb2, 0x59, 0x52, 0x7e, 0x61,
	0x77, 0xc9, 0x38, 0x52, 0xc7, 0x8f, 0x35, 0x30, 0x5e, 0x81, 0x81, 0xc3, 0x8f, 0x59, 0x65, 0xdd,
	0xd4, 0x15, 0xc7, 0xe6, 0x9c, 0xa9, 0x6d, 0x2f, 0x09, 0xe8, 0xa8, 0xe6, 0xd2, 0xcc, 0x75, 0xf6,
	0xcf, 0x0e, 0x32, 0x2f, 0x8a, 0xef, 0xf4, 0x2a, 0xc1, 0x3f, 0x6b, 0xd1, 0x87, 0xd3, 0x15, 0x7d,
	0x5d, 0x5d, 0xab, 0x8f, 0x42, 0xca, 0x77, 0xbf, 0x2b, 0xfd, 0x43, 0x29, 0x59, 0x99, 0xb2, 0x40,
	0x5a, 0x6a, 0x61, 0x57, 0xb6, 0xd6, 0x3a, 0x99, 0xe4, 0xa8, 0x4c, 0x73, 0x54, 0x16, 0x39, 0xc2,
	0x67, 0x8e, 0x70, 0x2f, 0x11, 0x9e, 0x24, 0xc2, 0xb3, 0x44, 0x78, 0x91, 0x08, 0x63, 0x89, 0x30,
	0x91, 0x08, 0xef, 0x12, 0xe1, 0x43, 0xa2, 0xb2, 0x90, 0x08, 0x0f, 0x73, 0x54, 0x26, 0x73, 0x54,
	0xa6, 0x73, 0x54, 0xfc, 0xbf, 0xf4, 0x44, 0x0e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x52,
	0x29, 0x98, 0x65, 0x02, 0x00, 0x00,
}

func (this *Orb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Orb)
	if !ok {
		that2, ok := that.(Orb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AbilityID.Equal(that1.AbilityID) {
		return false
	}
	return true
}
func (this *Component) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Component)
	if !ok {
		that2, ok := that.(Component)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Type)
	if !ok {
		that2, ok := that.(Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Orb.Equal(that1.Orb) {
		return false
	}
	if !this.Component.Equal(that1.Component) {
		return false
	}
	return true
}
func (this *I) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*I)
	if !ok {
		that2, ok := that.(I)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	if !this.Icon.Equal(that1.Icon) {
		return false
	}
	if !this.Type.Equal(&that1.Type) {
		return false
	}
	return true
}
func (this *Orb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&item.Orb{")
	s = append(s, "AbilityID: "+fmt.Sprintf("%#v", this.AbilityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Component) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&item.Component{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&item.Type{")
	if this.Orb != nil {
		s = append(s, "Orb: "+fmt.Sprintf("%#v", this.Orb)+",\n")
	}
	if this.Component != nil {
		s = append(s, "Component: "+fmt.Sprintf("%#v", this.Component)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *I) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&item.I{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Type: "+strings.Replace(this.Type.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringItem(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Orb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Orb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Orb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AbilityID.Size()
		i -= size
		if _, err := m.AbilityID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintItem(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Component) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Type.Size()
		i -= size
		if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintItem(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Component != nil {
		{
			size, err := m.Component.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Orb != nil {
		{
			size, err := m.Orb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *I) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *I) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *I) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintItem(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Icon.Size()
		i -= size
		if _, err := m.Icon.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintItem(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintItem(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintItem(dAtA []byte, offset int, v uint64) int {
	offset -= sovItem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedOrb(r randyItem, easy bool) *Orb {
	this := &Orb{}
	v1 := github_com_elojah_game_02_pkg_ulid.NewPopulatedID(r)
	this.AbilityID = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedComponent(r randyItem, easy bool) *Component {
	this := &Component{}
	v2 := github_com_elojah_game_02_pkg_ulid.NewPopulatedID(r)
	this.Type = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedType(r randyItem, easy bool) *Type {
	this := &Type{}
	fieldNum := r.Intn(2)
	switch fieldNum {
	case 0:
		this.Orb = NewPopulatedOrb(r, easy)
	case 1:
		this.Component = NewPopulatedComponent(r, easy)
	}
	return this
}

func NewPopulatedI(r randyItem, easy bool) *I {
	this := &I{}
	v3 := github_com_elojah_game_02_pkg_ulid.NewPopulatedID(r)
	this.ID = *v3
	this.Name = string(randStringItem(r))
	this.Details = string(randStringItem(r))
	v4 := github_com_elojah_game_02_pkg_ulid.NewPopulatedID(r)
	this.Icon = *v4
	v5 := NewPopulatedType(r, easy)
	this.Type = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyItem interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneItem(r randyItem) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringItem(r randyItem) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneItem(r)
	}
	return string(tmps)
}
func randUnrecognizedItem(r randyItem, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldItem(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldItem(dAtA []byte, r randyItem, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateItem(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateItem(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateItem(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateItem(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateItem(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateItem(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateItem(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Orb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AbilityID.Size()
	n += 1 + l + sovItem(uint64(l))
	return n
}

func (m *Component) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Type.Size()
	n += 1 + l + sovItem(uint64(l))
	return n
}

func (m *Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Orb != nil {
		l = m.Orb.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Component != nil {
		l = m.Component.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *I) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovItem(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = m.Icon.Size()
	n += 1 + l + sovItem(uint64(l))
	l = m.Type.Size()
	n += 1 + l + sovItem(uint64(l))
	return n
}

func sovItem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItem(x uint64) (n int) {
	return sovItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Orb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Orb{`,
		`AbilityID:` + fmt.Sprintf("%v", this.AbilityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Component) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Component{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Type{`,
		`Orb:` + strings.Replace(this.Orb.String(), "Orb", "Orb", 1) + `,`,
		`Component:` + strings.Replace(this.Component.String(), "Component", "Component", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *I) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&I{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Type:` + strings.Replace(strings.Replace(this.Type.String(), "Type", "Type", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringItem(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (this *Type) GetValue() interface{} {
	if this.Orb != nil {
		return this.Orb
	}
	if this.Component != nil {
		return this.Component
	}
	return nil
}

func (this *Type) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *Orb:
		this.Orb = vt
	case *Component:
		this.Component = vt
	default:
		return false
	}
	return true
}
func (m *Orb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Orb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Orb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbilityID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Orb == nil {
				m.Orb = &Orb{}
			}
			if err := m.Orb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Component == nil {
				m.Component = &Component{}
			}
			if err := m.Component.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *I) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: I: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: I: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItem = fmt.Errorf("proto: unexpected end of group")
)

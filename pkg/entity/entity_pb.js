/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('../../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var github_com_elojah_game_02_pkg_geometry_geometry_pb = require('../../../../../github.com/elojah/game_02/pkg/geometry/geometry_pb.js');
goog.exportSymbol('proto.entity.Cast', null, global);
goog.exportSymbol('proto.entity.E', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.Cast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.Cast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.entity.Cast.displayName = 'proto.entity.Cast';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.Cast.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.Cast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.Cast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.Cast.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityid: msg.getAbilityid_asB64(),
    ts: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.Cast}
 */
proto.entity.Cast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.Cast;
  return proto.entity.Cast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.Cast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.Cast}
 */
proto.entity.Cast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAbilityid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.Cast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.Cast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.Cast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.Cast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbilityid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes AbilityID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.Cast.prototype.getAbilityid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes AbilityID = 1;
 * This is a type-conversion wrapper around `getAbilityid()`
 * @return {string}
 */
proto.entity.Cast.prototype.getAbilityid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAbilityid()));
};


/**
 * optional bytes AbilityID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAbilityid()`
 * @return {!Uint8Array}
 */
proto.entity.Cast.prototype.getAbilityid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAbilityid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.Cast.prototype.setAbilityid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 TS = 2;
 * @return {number}
 */
proto.entity.Cast.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.entity.Cast.prototype.setTs = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.E = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.E, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.entity.E.displayName = 'proto.entity.E';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.E.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.E.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.E} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.E.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    templateid: msg.getTemplateid_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ownerid: msg.getOwnerid_asB64(),
    dead: jspb.Message.getFieldWithDefault(msg, 5, false),
    hp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxhp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    mp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxmp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    direction: (f = msg.getDirection()) && github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.toObject(includeInstance, f),
    cast: (f = msg.getCast()) && proto.entity.Cast.toObject(includeInstance, f),
    assetid: msg.getAssetid_asB64(),
    inventoryid: msg.getInventoryid_asB64(),
    spawnid: msg.getSpawnid_asB64(),
    ts: jspb.Message.getFieldWithDefault(msg, 16, 0),
    state: msg.getState_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.E}
 */
proto.entity.E.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.E;
  return proto.entity.E.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.E} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.E}
 */
proto.entity.E.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTemplateid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwnerid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDead(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxhp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxmp(value);
      break;
    case 10:
      var value = new github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3;
      reader.readMessage(value,github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    case 11:
      var value = new github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3;
      reader.readMessage(value,github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 12:
      var value = new proto.entity.Cast;
      reader.readMessage(value,proto.entity.Cast.deserializeBinaryFromReader);
      msg.setCast(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInventoryid(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpawnid(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTs(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.E.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.E} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.E.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTemplateid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwnerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDead();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMaxhp();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMp();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getMaxmp();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getCast();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.entity.Cast.serializeBinaryToWriter
    );
  }
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getInventoryid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getSpawnid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getTs();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getState_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.entity.E.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes TemplateID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getTemplateid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes TemplateID = 2;
 * This is a type-conversion wrapper around `getTemplateid()`
 * @return {string}
 */
proto.entity.E.prototype.getTemplateid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTemplateid()));
};


/**
 * optional bytes TemplateID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTemplateid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getTemplateid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTemplateid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setTemplateid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string Name = 3;
 * @return {string}
 */
proto.entity.E.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.entity.E.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes OwnerID = 4;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getOwnerid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes OwnerID = 4;
 * This is a type-conversion wrapper around `getOwnerid()`
 * @return {string}
 */
proto.entity.E.prototype.getOwnerid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwnerid()));
};


/**
 * optional bytes OwnerID = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnerid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getOwnerid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwnerid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setOwnerid = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool Dead = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.entity.E.prototype.getDead = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.entity.E.prototype.setDead = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint64 HP = 6;
 * @return {number}
 */
proto.entity.E.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setHp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 MaxHP = 7;
 * @return {number}
 */
proto.entity.E.prototype.getMaxhp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setMaxhp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 MP = 8;
 * @return {number}
 */
proto.entity.E.prototype.getMp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setMp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 MaxMP = 9;
 * @return {number}
 */
proto.entity.E.prototype.getMaxmp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setMaxmp = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional geometry.Vec3 Direction = 10;
 * @return {?proto.geometry.Vec3}
 */
proto.entity.E.prototype.getDirection = function() {
  return /** @type{?proto.geometry.Vec3} */ (
    jspb.Message.getWrapperField(this, github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3, 10));
};


/** @param {?proto.geometry.Vec3|undefined} value */
proto.entity.E.prototype.setDirection = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.entity.E.prototype.clearDirection = function() {
  this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.entity.E.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional geometry.Vec3 Position = 11;
 * @return {?proto.geometry.Vec3}
 */
proto.entity.E.prototype.getPosition = function() {
  return /** @type{?proto.geometry.Vec3} */ (
    jspb.Message.getWrapperField(this, github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3, 11));
};


/** @param {?proto.geometry.Vec3|undefined} value */
proto.entity.E.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.entity.E.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.entity.E.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Cast Cast = 12;
 * @return {?proto.entity.Cast}
 */
proto.entity.E.prototype.getCast = function() {
  return /** @type{?proto.entity.Cast} */ (
    jspb.Message.getWrapperField(this, proto.entity.Cast, 12));
};


/** @param {?proto.entity.Cast|undefined} value */
proto.entity.E.prototype.setCast = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.entity.E.prototype.clearCast = function() {
  this.setCast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.entity.E.prototype.hasCast = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes AssetID = 13;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes AssetID = 13;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.entity.E.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setAssetid = function(value) {
  jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes InventoryID = 14;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getInventoryid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes InventoryID = 14;
 * This is a type-conversion wrapper around `getInventoryid()`
 * @return {string}
 */
proto.entity.E.prototype.getInventoryid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInventoryid()));
};


/**
 * optional bytes InventoryID = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInventoryid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getInventoryid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInventoryid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setInventoryid = function(value) {
  jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bytes SpawnID = 15;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getSpawnid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes SpawnID = 15;
 * This is a type-conversion wrapper around `getSpawnid()`
 * @return {string}
 */
proto.entity.E.prototype.getSpawnid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpawnid()));
};


/**
 * optional bytes SpawnID = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpawnid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getSpawnid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpawnid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setSpawnid = function(value) {
  jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional uint64 TS = 16;
 * @return {number}
 */
proto.entity.E.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setTs = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional bytes State = 17;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getState = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes State = 17;
 * This is a type-conversion wrapper around `getState()`
 * @return {string}
 */
proto.entity.E.prototype.getState_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getState()));
};


/**
 * optional bytes State = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getState()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getState_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getState()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setState = function(value) {
  jspb.Message.setProto3BytesField(this, 17, value);
};


goog.object.extend(exports, proto.entity);

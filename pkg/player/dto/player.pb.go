// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_02/pkg/player/dto/player.proto

package dto

import (
	fmt "fmt"
	dto "github.com/elojah/game_02/pkg/account/dto"
	github_com_elojah_game_02_pkg_ulid "github.com/elojah/game_02/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnectPlayer struct {
	Auth     dto.Auth                              `protobuf:"bytes,1,opt,name=Auth,proto3" json:"Auth"`
	PlayerID github_com_elojah_game_02_pkg_ulid.ID `protobuf:"bytes,2,opt,name=PlayerID,proto3,customtype=github.com/elojah/game_02/pkg/ulid.ID" json:"PlayerID"`
}

func (m *ConnectPlayer) Reset()      { *m = ConnectPlayer{} }
func (*ConnectPlayer) ProtoMessage() {}
func (*ConnectPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baa336cce0f7d41, []int{0}
}
func (m *ConnectPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectPlayer.Merge(m, src)
}
func (m *ConnectPlayer) XXX_Size() int {
	return m.Size()
}
func (m *ConnectPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectPlayer proto.InternalMessageInfo

func (m *ConnectPlayer) GetAuth() dto.Auth {
	if m != nil {
		return m.Auth
	}
	return dto.Auth{}
}

type CreatePlayer struct {
	Auth       dto.Auth                              `protobuf:"bytes,1,opt,name=Auth,proto3" json:"Auth"`
	TemplateID github_com_elojah_game_02_pkg_ulid.ID `protobuf:"bytes,2,opt,name=TemplateID,proto3,customtype=github.com/elojah/game_02/pkg/ulid.ID" json:"TemplateID"`
	Name       string                                `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *CreatePlayer) Reset()      { *m = CreatePlayer{} }
func (*CreatePlayer) ProtoMessage() {}
func (*CreatePlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baa336cce0f7d41, []int{1}
}
func (m *CreatePlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlayer.Merge(m, src)
}
func (m *CreatePlayer) XXX_Size() int {
	return m.Size()
}
func (m *CreatePlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlayer.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlayer proto.InternalMessageInfo

func (m *CreatePlayer) GetAuth() dto.Auth {
	if m != nil {
		return m.Auth
	}
	return dto.Auth{}
}

func (m *CreatePlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectPlayer)(nil), "dto.ConnectPlayer")
	proto.RegisterType((*CreatePlayer)(nil), "dto.CreatePlayer")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_02/pkg/player/dto/player.proto", fileDescriptor_4baa336cce0f7d41)
}

var fileDescriptor_4baa336cce0f7d41 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcd, 0xc9, 0xcf, 0x4a, 0xcc, 0xd0, 0x4f, 0x4f,
	0xcc, 0x4d, 0x8d, 0x37, 0x30, 0xd2, 0x2f, 0xc8, 0x4e, 0xd7, 0x2f, 0xc8, 0x49, 0xac, 0x4c, 0x2d,
	0xd2, 0x4f, 0x29, 0xc9, 0x87, 0x32, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x98, 0x53, 0x4a,
	0xf2, 0xa5, 0x74, 0x91, 0xf4, 0xa6, 0xe7, 0xa7, 0xe7, 0xeb, 0x83, 0xe5, 0x92, 0x4a, 0xd3, 0xc0,
	0x3c, 0x30, 0x07, 0xcc, 0x82, 0xe8, 0x91, 0x32, 0xc7, 0x6f, 0x55, 0x62, 0x72, 0x72, 0x7e, 0x69,
	0x5e, 0x09, 0xd8, 0x2e, 0x28, 0x1b, 0xa2, 0x51, 0xa9, 0x9e, 0x8b, 0xd7, 0x39, 0x3f, 0x2f, 0x2f,
	0x35, 0xb9, 0x24, 0x00, 0xec, 0x06, 0x21, 0x65, 0x2e, 0x16, 0xc7, 0xd2, 0x92, 0x0c, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0x6e, 0x23, 0x4e, 0xbd, 0x94, 0x92, 0x7c, 0x3d, 0x90, 0x80, 0x13, 0xcb, 0x89,
	0x7b, 0xf2, 0x0c, 0x41, 0x60, 0x49, 0x21, 0x4f, 0x2e, 0x0e, 0x88, 0x72, 0x4f, 0x17, 0x09, 0x26,
	0x05, 0x46, 0x0d, 0x1e, 0x27, 0x5d, 0x90, 0xec, 0xad, 0x7b, 0xf2, 0xaa, 0xf8, 0x1d, 0x52, 0x9a,
	0x93, 0x99, 0xa2, 0xe7, 0xe9, 0x12, 0x04, 0xd7, 0xae, 0x34, 0x8d, 0x91, 0x8b, 0xc7, 0xb9, 0x28,
	0x35, 0xb1, 0x24, 0x95, 0x14, 0x07, 0xf8, 0x72, 0x71, 0x85, 0xa4, 0xe6, 0x16, 0xe4, 0x24, 0x96,
	0xa4, 0x92, 0xeb, 0x04, 0x24, 0x03, 0x84, 0x84, 0xb8, 0x58, 0xfc, 0x12, 0x73, 0x53, 0x25, 0x98,
	0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x27, 0x87, 0x0b, 0x0f, 0xe5, 0x18, 0x6e, 0x3c, 0x94,
	0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xf1, 0xc7, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e,
	0xc9, 0x31, 0xee, 0x78, 0x24, 0xc7, 0x78, 0xe0, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c,
	0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x38,
	0x88, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x21, 0xf9, 0xc0, 0xab, 0x08, 0x02, 0x00, 0x00,
}

func (this *ConnectPlayer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectPlayer)
	if !ok {
		that2, ok := that.(ConnectPlayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Auth.Equal(&that1.Auth) {
		return false
	}
	if !this.PlayerID.Equal(that1.PlayerID) {
		return false
	}
	return true
}
func (this *CreatePlayer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatePlayer)
	if !ok {
		that2, ok := that.(CreatePlayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Auth.Equal(&that1.Auth) {
		return false
	}
	if !this.TemplateID.Equal(that1.TemplateID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ConnectPlayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dto.ConnectPlayer{")
	s = append(s, "Auth: "+strings.Replace(this.Auth.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "PlayerID: "+fmt.Sprintf("%#v", this.PlayerID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatePlayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dto.CreatePlayer{")
	s = append(s, "Auth: "+strings.Replace(this.Auth.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "TemplateID: "+fmt.Sprintf("%#v", this.TemplateID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPlayer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ConnectPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PlayerID.Size()
		i -= size
		if _, err := m.PlayerID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPlayer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPlayer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CreatePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.TemplateID.Size()
		i -= size
		if _, err := m.TemplateID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPlayer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPlayer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPlayer(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedConnectPlayer(r randyPlayer, easy bool) *ConnectPlayer {
	this := &ConnectPlayer{}
	v1 := dto.NewPopulatedAuth(r, easy)
	this.Auth = *v1
	v2 := github_com_elojah_game_02_pkg_ulid.NewPopulatedID(r)
	this.PlayerID = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreatePlayer(r randyPlayer, easy bool) *CreatePlayer {
	this := &CreatePlayer{}
	v3 := dto.NewPopulatedAuth(r, easy)
	this.Auth = *v3
	v4 := github_com_elojah_game_02_pkg_ulid.NewPopulatedID(r)
	this.TemplateID = *v4
	this.Name = string(randStringPlayer(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPlayer interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePlayer(r randyPlayer) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPlayer(r randyPlayer) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RunePlayer(r)
	}
	return string(tmps)
}
func randUnrecognizedPlayer(r randyPlayer, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPlayer(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPlayer(dAtA []byte, r randyPlayer, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePlayer(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulatePlayer(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulatePlayer(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePlayer(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePlayer(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePlayer(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePlayer(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ConnectPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auth.Size()
	n += 1 + l + sovPlayer(uint64(l))
	l = m.PlayerID.Size()
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *CreatePlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auth.Size()
	n += 1 + l + sovPlayer(uint64(l))
	l = m.TemplateID.Size()
	n += 1 + l + sovPlayer(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func sovPlayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayer(x uint64) (n int) {
	return sovPlayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConnectPlayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectPlayer{`,
		`Auth:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Auth), "Auth", "dto.Auth", 1), `&`, ``, 1) + `,`,
		`PlayerID:` + fmt.Sprintf("%v", this.PlayerID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePlayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePlayer{`,
		`Auth:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Auth), "Auth", "dto.Auth", 1), `&`, ``, 1) + `,`,
		`TemplateID:` + fmt.Sprintf("%v", this.TemplateID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPlayer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConnectPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PlayerID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TemplateID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayer = fmt.Errorf("proto: unexpected end of group")
)

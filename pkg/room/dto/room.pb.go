// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: room.proto

package dto

import (
	fmt "fmt"
	dto "github.com/elojah/game_02/pkg/account/dto"
	geometry "github.com/elojah/game_02/pkg/geometry"
	dto1 "github.com/elojah/game_02/pkg/space/dto"
	github_com_elojah_game_02_pkg_ulid "github.com/elojah/game_02/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Connect struct {
	Auth     dto.Auth                              `protobuf:"bytes,1,opt,name=Auth,proto3" json:"Auth"`
	ID       github_com_elojah_game_02_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ID,proto3,customtype=github.com/elojah/game_02/pkg/ulid.ID" json:"ID"`
	Password string                                `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *Connect) Reset()      { *m = Connect{} }
func (*Connect) ProtoMessage() {}
func (*Connect) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fd27dd97284ef4, []int{0}
}
func (m *Connect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Connect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Connect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Connect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connect.Merge(m, src)
}
func (m *Connect) XXX_Size() int {
	return m.Size()
}
func (m *Connect) XXX_DiscardUnknown() {
	xxx_messageInfo_Connect.DiscardUnknown(m)
}

var xxx_messageInfo_Connect proto.InternalMessageInfo

func (m *Connect) GetAuth() dto.Auth {
	if m != nil {
		return m.Auth
	}
	return dto.Auth{}
}

func (m *Connect) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Create struct {
	Auth             dto.Auth       `protobuf:"bytes,1,opt,name=Auth,proto3" json:"Auth"`
	Name             string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Password         string         `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	Map              dto1.CreateMap `protobuf:"bytes,4,opt,name=Map,proto3" json:"Map"`
	SectorDimensions geometry.Vec3  `protobuf:"bytes,5,opt,name=SectorDimensions,proto3" json:"SectorDimensions"`
}

func (m *Create) Reset()      { *m = Create{} }
func (*Create) ProtoMessage() {}
func (*Create) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fd27dd97284ef4, []int{1}
}
func (m *Create) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Create) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Create.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Create) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Create.Merge(m, src)
}
func (m *Create) XXX_Size() int {
	return m.Size()
}
func (m *Create) XXX_DiscardUnknown() {
	xxx_messageInfo_Create.DiscardUnknown(m)
}

var xxx_messageInfo_Create proto.InternalMessageInfo

func (m *Create) GetAuth() dto.Auth {
	if m != nil {
		return m.Auth
	}
	return dto.Auth{}
}

func (m *Create) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Create) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Create) GetMap() dto1.CreateMap {
	if m != nil {
		return m.Map
	}
	return dto1.CreateMap{}
}

func (m *Create) GetSectorDimensions() geometry.Vec3 {
	if m != nil {
		return m.SectorDimensions
	}
	return geometry.Vec3{}
}

func init() {
	proto.RegisterType((*Connect)(nil), "dto.Connect")
	proto.RegisterType((*Create)(nil), "dto.Create")
}

func init() { proto.RegisterFile("room.proto", fileDescriptor_c5fd27dd97284ef4) }

var fileDescriptor_c5fd27dd97284ef4 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0xeb, 0xd3, 0x40,
	0x14, 0xc7, 0xf3, 0xda, 0xf8, 0xd3, 0x9e, 0x22, 0x92, 0x29, 0x74, 0x78, 0xbf, 0x52, 0x51, 0xba,
	0x34, 0x91, 0x16, 0x71, 0x12, 0x6a, 0x9b, 0xa5, 0x43, 0x45, 0x22, 0xb8, 0xca, 0x35, 0x39, 0xd3,
	0x68, 0x93, 0x17, 0x92, 0x0b, 0xe2, 0xe6, 0xea, 0xe6, 0x9f, 0xe1, 0x9f, 0xe0, 0xe8, 0x66, 0xc7,
	0x8e, 0xc5, 0xa1, 0x98, 0xeb, 0xe2, 0xd8, 0xd1, 0x51, 0x7a, 0x0d, 0x45, 0x10, 0x82, 0xdb, 0xf7,
	0xbd, 0xf7, 0xfd, 0x7c, 0xdf, 0xe3, 0x8e, 0xb1, 0x9c, 0x28, 0x71, 0xb2, 0x9c, 0x24, 0x59, 0xed,
	0x50, 0x52, 0x77, 0x18, 0xc5, 0x72, 0x55, 0x2e, 0x9d, 0x80, 0x12, 0x37, 0xa2, 0x88, 0x5c, 0x3d,
	0x5b, 0x96, 0x6f, 0x74, 0xa5, 0x0b, 0xad, 0xce, 0x4c, 0x77, 0xf4, 0x97, 0x5d, 0xac, 0xe9, 0x2d,
	0x5f, 0xb9, 0x11, 0x4f, 0xc4, 0xeb, 0x47, 0x23, 0x37, 0x7b, 0x17, 0xb9, 0x45, 0xc6, 0x03, 0xe1,
	0x86, 0x92, 0x5c, 0x19, 0xaf, 0x45, 0xcd, 0x3c, 0x69, 0x66, 0x78, 0x10, 0x50, 0x99, 0x4a, 0x4d,
	0xd5, 0xba, 0x06, 0x1f, 0x37, 0x83, 0x91, 0xa0, 0x44, 0xc8, 0xfc, 0xc3, 0x45, 0x9c, 0xb1, 0xfe,
	0x27, 0x60, 0x37, 0x67, 0x94, 0xa6, 0x22, 0x90, 0xd6, 0x7d, 0x66, 0x3e, 0x2b, 0xe5, 0xca, 0x86,
	0x1e, 0x0c, 0x6e, 0x8f, 0x3a, 0x4e, 0x28, 0xc9, 0x39, 0x35, 0xa6, 0xe6, 0x66, 0x7f, 0x6d, 0xf8,
	0x7a, 0x68, 0x3d, 0x65, 0xad, 0xb9, 0x67, 0xb7, 0x7a, 0x30, 0xb8, 0x33, 0x1d, 0x9e, 0xfa, 0x3f,
	0xf6, 0xd7, 0x0f, 0x9a, 0x77, 0x97, 0xeb, 0x38, 0x74, 0xe6, 0x9e, 0xdf, 0x9a, 0x7b, 0x56, 0x97,
	0xdd, 0x7a, 0xc1, 0x8b, 0xe2, 0x3d, 0xe5, 0xa1, 0xdd, 0xee, 0xc1, 0xa0, 0xe3, 0x5f, 0xea, 0xfe,
	0x77, 0x60, 0x57, 0xb3, 0x5c, 0x70, 0x29, 0xfe, 0xef, 0x14, 0x8b, 0x99, 0xcf, 0x79, 0x22, 0xf4,
	0x31, 0x1d, 0x5f, 0xeb, 0xa6, 0x7c, 0xeb, 0x21, 0x6b, 0x2f, 0x78, 0x66, 0x9b, 0x3a, 0xf3, 0xae,
	0xce, 0x3c, 0xaf, 0x5b, 0xf0, 0xac, 0x0e, 0x3e, 0x19, 0xac, 0x09, 0xbb, 0xf7, 0x52, 0x04, 0x92,
	0x72, 0x2f, 0x4e, 0x44, 0x5a, 0xc4, 0x94, 0x16, 0xf6, 0x8d, 0x1a, 0xba, 0x3c, 0xdf, 0x2b, 0x11,
	0x8c, 0x6b, 0xe8, 0x1f, 0xf7, 0x74, 0xb2, 0xad, 0xd0, 0xd8, 0x55, 0x68, 0x1c, 0x2b, 0x84, 0xdf,
	0x15, 0xc2, 0x47, 0x85, 0xf0, 0x45, 0x21, 0x7c, 0x55, 0x08, 0xdf, 0x14, 0xc2, 0x46, 0x21, 0x6c,
	0x15, 0xc2, 0x4f, 0x85, 0xf0, 0x4b, 0xa1, 0x71, 0x54, 0x08, 0x9f, 0x0f, 0x68, 0x6c, 0x0f, 0x68,
	0xec, 0x0e, 0x68, 0x2c, 0xaf, 0xf4, 0xf7, 0x8c, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x06,
	0xf1, 0x56, 0x84, 0x02, 0x00, 0x00,
}

func (this *Connect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Connect)
	if !ok {
		that2, ok := that.(Connect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Auth.Equal(&that1.Auth) {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *Create) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Create)
	if !ok {
		that2, ok := that.(Create)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Auth.Equal(&that1.Auth) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if !this.Map.Equal(&that1.Map) {
		return false
	}
	if !this.SectorDimensions.Equal(&that1.SectorDimensions) {
		return false
	}
	return true
}
func (this *Connect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dto.Connect{")
	s = append(s, "Auth: "+strings.Replace(this.Auth.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Create) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dto.Create{")
	s = append(s, "Auth: "+strings.Replace(this.Auth.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Map: "+strings.Replace(this.Map.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "SectorDimensions: "+strings.Replace(this.SectorDimensions.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRoom(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Connect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Connect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Connect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRoom(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoom(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Create) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Create) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SectorDimensions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoom(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoom(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoom(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRoom(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoom(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedConnect(r randyRoom, easy bool) *Connect {
	this := &Connect{}
	v1 := dto.NewPopulatedAuth(r, easy)
	this.Auth = *v1
	v2 := github_com_elojah_game_02_pkg_ulid.NewPopulatedID(r)
	this.ID = *v2
	this.Password = string(randStringRoom(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreate(r randyRoom, easy bool) *Create {
	this := &Create{}
	v3 := dto.NewPopulatedAuth(r, easy)
	this.Auth = *v3
	this.Name = string(randStringRoom(r))
	this.Password = string(randStringRoom(r))
	v4 := dto1.NewPopulatedCreateMap(r, easy)
	this.Map = *v4
	v5 := geometry.NewPopulatedVec3(r, easy)
	this.SectorDimensions = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRoom interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRoom(r randyRoom) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRoom(r randyRoom) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneRoom(r)
	}
	return string(tmps)
}
func randUnrecognizedRoom(r randyRoom, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRoom(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRoom(dAtA []byte, r randyRoom, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRoom(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Connect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auth.Size()
	n += 1 + l + sovRoom(uint64(l))
	l = m.ID.Size()
	n += 1 + l + sovRoom(uint64(l))
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *Create) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auth.Size()
	n += 1 + l + sovRoom(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = m.Map.Size()
	n += 1 + l + sovRoom(uint64(l))
	l = m.SectorDimensions.Size()
	n += 1 + l + sovRoom(uint64(l))
	return n
}

func sovRoom(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoom(x uint64) (n int) {
	return sovRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Connect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Connect{`,
		`Auth:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Auth), "Auth", "dto.Auth", 1), `&`, ``, 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Create) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Create{`,
		`Auth:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Auth), "Auth", "dto.Auth", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Map:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Map), "CreateMap", "dto1.CreateMap", 1), `&`, ``, 1) + `,`,
		`SectorDimensions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.SectorDimensions), "Vec3", "geometry.Vec3", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRoom(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Connect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Connect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Connect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Create) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectorDimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SectorDimensions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoom
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoom
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoom
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoom        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoom          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoom = fmt.Errorf("proto: unexpected end of group")
)

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('../../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var github_com_elojah_game_02_pkg_geometry_geometry_pb = require('../../../../../github.com/elojah/game_02/pkg/geometry/geometry_pb.js');
goog.exportSymbol('proto.space.Terrain', null, global);
goog.exportSymbol('proto.space.TileMap', null, global);
goog.exportSymbol('proto.space.TileSet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.TileSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.TileSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.space.TileSet.displayName = 'proto.space.TileSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.space.TileSet.prototype.toObject = function(opt_includeInstance) {
  return proto.space.TileSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.space.TileSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.TileSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    x: jspb.Message.getFieldWithDefault(msg, 4, 0),
    y: jspb.Message.getFieldWithDefault(msg, 5, 0),
    terrainsMap: (f = msg.getTerrainsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.TileSet}
 */
proto.space.TileSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.space.TileSet;
  return proto.space.TileSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.TileSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.TileSet}
 */
proto.space.TileSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setY(value);
      break;
    case 6:
      var value = msg.getTerrainsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readUint64, null, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.TileSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.space.TileSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.TileSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.TileSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTerrainsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeUint64);
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.space.TileSet.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.space.TileSet.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.space.TileSet.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.space.TileSet.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.space.TileSet.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.space.TileSet.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 Size = 3;
 * @return {number}
 */
proto.space.TileSet.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.space.TileSet.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 X = 4;
 * @return {number}
 */
proto.space.TileSet.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.space.TileSet.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 Y = 5;
 * @return {number}
 */
proto.space.TileSet.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.space.TileSet.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * map<int32, uint64> Terrains = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.space.TileSet.prototype.getTerrainsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.space.TileSet.prototype.clearTerrainsMap = function() {
  this.getTerrainsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.TileMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.space.TileMap.repeatedFields_, null);
};
goog.inherits(proto.space.TileMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.space.TileMap.displayName = 'proto.space.TileMap';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.TileMap.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.space.TileMap.prototype.toObject = function(opt_includeInstance) {
  return proto.space.TileMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.space.TileMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.TileMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    set: (f = msg.getSet()) && proto.space.TileSet.toObject(includeInstance, f),
    dim: (f = msg.getDim()) && github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.toObject(includeInstance, f),
    mapList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.TileMap}
 */
proto.space.TileMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.space.TileMap;
  return proto.space.TileMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.TileMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.TileMap}
 */
proto.space.TileMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.space.TileSet;
      reader.readMessage(value,proto.space.TileSet.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    case 2:
      var value = new github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3;
      reader.readMessage(value,github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setDim(value);
      break;
    case 3:
      var value = /** @type {!Array<!proto.space.Terrain>} */ (reader.readPackedEnum());
      msg.setMapList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.TileMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.space.TileMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.TileMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.TileMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.space.TileSet.serializeBinaryToWriter
    );
  }
  f = message.getDim();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getMapList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * optional TileSet Set = 1;
 * @return {?proto.space.TileSet}
 */
proto.space.TileMap.prototype.getSet = function() {
  return /** @type{?proto.space.TileSet} */ (
    jspb.Message.getWrapperField(this, proto.space.TileSet, 1));
};


/** @param {?proto.space.TileSet|undefined} value */
proto.space.TileMap.prototype.setSet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.space.TileMap.prototype.clearSet = function() {
  this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.space.TileMap.prototype.hasSet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional geometry.Vec3 Dim = 2;
 * @return {?proto.geometry.Vec3}
 */
proto.space.TileMap.prototype.getDim = function() {
  return /** @type{?proto.geometry.Vec3} */ (
    jspb.Message.getWrapperField(this, github_com_elojah_game_02_pkg_geometry_geometry_pb.Vec3, 2));
};


/** @param {?proto.geometry.Vec3|undefined} value */
proto.space.TileMap.prototype.setDim = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.space.TileMap.prototype.clearDim = function() {
  this.setDim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.space.TileMap.prototype.hasDim = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Terrain Map = 3;
 * @return {!Array<!proto.space.Terrain>}
 */
proto.space.TileMap.prototype.getMapList = function() {
  return /** @type {!Array<!proto.space.Terrain>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<!proto.space.Terrain>} value */
proto.space.TileMap.prototype.setMapList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.space.Terrain} value
 * @param {number=} opt_index
 */
proto.space.TileMap.prototype.addMap = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.space.TileMap.prototype.clearMapList = function() {
  this.setMapList([]);
};


/**
 * @enum {number}
 */
proto.space.Terrain = {
  SKY: 0,
  FLOOR: 1,
  PILLAR: 2,
  WALL: 3
};

goog.object.extend(exports, proto.space);

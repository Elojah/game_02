// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lobby.proto

package lobby

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import room "github.com/elojah/game_02/pkg/room"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_elojah_game_02_pkg_ulid "github.com/elojah/game_02/pkg/ulid"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type L struct {
	ID                   github_com_elojah_game_02_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,json=iD,proto3,customtype=github.com/elojah/game_02/pkg/ulid.ID" json:"ID"`
	Name                 string                                `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Rooms                map[string]room.R                     `protobuf:"bytes,3,rep,name=Rooms,json=rooms" json:"Rooms" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *L) Reset()      { *m = L{} }
func (*L) ProtoMessage() {}
func (*L) Descriptor() ([]byte, []int) {
	return fileDescriptor_lobby_e20e85352718241e, []int{0}
}
func (m *L) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *L) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L.Merge(dst, src)
}
func (m *L) XXX_Size() int {
	return m.Size()
}
func (m *L) XXX_DiscardUnknown() {
	xxx_messageInfo_L.DiscardUnknown(m)
}

var xxx_messageInfo_L proto.InternalMessageInfo

func (m *L) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *L) GetRooms() map[string]room.R {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func init() {
	proto.RegisterType((*L)(nil), "lobby.L")
	proto.RegisterMapType((map[string]room.R)(nil), "lobby.L.RoomsEntry")
}
func (this *L) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*L)
	if !ok {
		that2, ok := that.(L)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		a := this.Rooms[i]
		b := that1.Rooms[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *L) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&lobby.L{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	keysForRooms := make([]string, 0, len(this.Rooms))
	for k, _ := range this.Rooms {
		keysForRooms = append(keysForRooms, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRooms)
	mapStringForRooms := "map[string]room.R{"
	for _, k := range keysForRooms {
		mapStringForRooms += fmt.Sprintf("%#v: %#v,", k, this.Rooms[k])
	}
	mapStringForRooms += "}"
	if this.Rooms != nil {
		s = append(s, "Rooms: "+mapStringForRooms+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLobby(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *L) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLobby(dAtA, i, uint64(m.ID.Size()))
	n1, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Rooms) > 0 {
		for k, _ := range m.Rooms {
			dAtA[i] = 0x1a
			i++
			v := m.Rooms[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovLobby(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovLobby(uint64(len(k))) + msgSize
			i = encodeVarintLobby(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintLobby(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintLobby(dAtA, i, uint64((&v).Size()))
			n2, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n2
		}
	}
	return i, nil
}

func encodeVarintLobby(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedL(r randyLobby, easy bool) *L {
	this := &L{}
	v1 := github_com_elojah_game_02_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	this.Name = string(randStringLobby(r))
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Rooms = make(map[string]room.R)
		for i := 0; i < v2; i++ {
			this.Rooms[randStringLobby(r)] = *room.NewPopulatedR(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLobby interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLobby(r randyLobby) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLobby(r randyLobby) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneLobby(r)
	}
	return string(tmps)
}
func randUnrecognizedLobby(r randyLobby, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLobby(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLobby(dAtA []byte, r randyLobby, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLobby(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateLobby(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateLobby(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLobby(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLobby(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLobby(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLobby(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *L) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovLobby(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if len(m.Rooms) > 0 {
		for k, v := range m.Rooms {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLobby(uint64(len(k))) + 1 + l + sovLobby(uint64(l))
			n += mapEntrySize + 1 + sovLobby(uint64(mapEntrySize))
		}
	}
	return n
}

func sovLobby(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLobby(x uint64) (n int) {
	return sovLobby(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *L) String() string {
	if this == nil {
		return "nil"
	}
	keysForRooms := make([]string, 0, len(this.Rooms))
	for k, _ := range this.Rooms {
		keysForRooms = append(keysForRooms, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRooms)
	mapStringForRooms := "map[string]room.R{"
	for _, k := range keysForRooms {
		mapStringForRooms += fmt.Sprintf("%v: %v,", k, this.Rooms[k])
	}
	mapStringForRooms += "}"
	s := strings.Join([]string{`&L{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Rooms:` + mapStringForRooms + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLobby(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *L) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rooms == nil {
				m.Rooms = make(map[string]room.R)
			}
			var mapkey string
			mapvalue := &room.R{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLobby
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthLobby
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &room.R{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobby(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLobby
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rooms[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLobby(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLobby
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLobby(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLobby = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLobby   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lobby.proto", fileDescriptor_lobby_e20e85352718241e) }

var fileDescriptor_lobby_e20e85352718241e = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0x3f, 0x4b, 0xc3, 0x40,
	0x14, 0xcf, 0x4b, 0x1b, 0xa5, 0x57, 0x07, 0x39, 0x97, 0x52, 0xf0, 0xb5, 0x08, 0x42, 0x97, 0xde,
	0x49, 0x5d, 0x8a, 0xe0, 0x60, 0x89, 0x43, 0xa1, 0x38, 0xdc, 0x17, 0x90, 0x44, 0x63, 0x1a, 0x9b,
	0xeb, 0x95, 0x34, 0x11, 0xb2, 0xf9, 0x11, 0xfc, 0x18, 0x7e, 0x04, 0x47, 0xc7, 0xe2, 0xd4, 0x51,
	0x1c, 0x8a, 0x39, 0x17, 0xc7, 0x8e, 0x8e, 0x92, 0xcb, 0xa0, 0xdb, 0xef, 0x0f, 0xef, 0xfd, 0x7e,
	0xef, 0x91, 0x66, 0xac, 0x7c, 0x3f, 0x67, 0x8b, 0x44, 0xa5, 0x8a, 0x3a, 0x86, 0xb4, 0xfb, 0x61,
	0x94, 0x4e, 0x33, 0x9f, 0xdd, 0x28, 0xc9, 0x43, 0x15, 0x2a, 0x6e, 0x5c, 0x3f, 0xbb, 0x33, 0xcc,
	0x10, 0x83, 0xaa, 0xa9, 0x36, 0x49, 0x94, 0x92, 0x15, 0x3e, 0x7a, 0x03, 0x02, 0x13, 0x7a, 0x4e,
	0xec, 0xb1, 0xdb, 0x82, 0x2e, 0xf4, 0xf6, 0x46, 0xfd, 0xd5, 0xa6, 0x63, 0x7d, 0x6c, 0x3a, 0xc7,
	0xff, 0x96, 0x06, 0xb1, 0xba, 0xf7, 0xa6, 0x3c, 0xf4, 0x64, 0x70, 0x7d, 0x32, 0xe0, 0x8b, 0x59,
	0xc8, 0xb3, 0x38, 0xba, 0x65, 0x63, 0x57, 0xd8, 0x91, 0x4b, 0x29, 0xa9, 0x5f, 0x79, 0x32, 0x68,
	0xd9, 0x5d, 0xe8, 0x35, 0x44, 0x7d, 0xee, 0xc9, 0x80, 0x72, 0xe2, 0x08, 0xa5, 0xe4, 0xb2, 0x55,
	0xeb, 0xd6, 0x7a, 0xcd, 0xc1, 0x01, 0xab, 0x7a, 0x4f, 0x98, 0x51, 0x2f, 0xe7, 0x69, 0x92, 0x8f,
	0xea, 0x65, 0x94, 0x70, 0xca, 0x3a, 0xcb, 0xf6, 0x05, 0x21, 0x7f, 0x16, 0xdd, 0x27, 0xb5, 0x59,
	0x90, 0x9b, 0x4a, 0x0d, 0x51, 0x42, 0x7a, 0x48, 0x9c, 0x07, 0x2f, 0xce, 0xaa, 0x94, 0xe6, 0x60,
	0x97, 0x99, 0x2b, 0x84, 0xa8, 0xd4, 0x33, 0x7b, 0x08, 0xa3, 0xe1, 0xba, 0x40, 0xeb, 0xbd, 0x40,
	0x6b, 0x5b, 0x20, 0xfc, 0x14, 0x08, 0x8f, 0x1a, 0xe1, 0x59, 0x23, 0xbc, 0x68, 0x84, 0x57, 0x8d,
	0xb0, 0xd2, 0x08, 0x6b, 0x8d, 0xf0, 0xa9, 0x11, 0xbe, 0x35, 0x5a, 0x5b, 0x8d, 0xf0, 0xf4, 0x85,
	0x96, 0xbf, 0x63, 0xbe, 0x71, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xc9, 0x0a, 0xe8, 0x5e,
	0x01, 0x00, 0x00,
}
